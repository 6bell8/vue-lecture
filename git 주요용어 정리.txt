git 관련 용어 메모

branch는 commit 의 복사본

git branch coupon(작명)  < 사본을 만든 것이다.
git switch coupon 을 입력하면 브랜치로 이동한 것이다.

git branch는 원래 있던 master에서 가지를 하나 더 내뻗는 기능을 뜻한다. 
git swich (작명) 이후 작업을 하면 해당 과정은 branch 밖에서 이루어지고 git add . git commit -m 을 하더라도
원래 git switch master 했으면 해당 작업한 내용은 생략되고 원래 master 파일로 돌아온다.

-독립적으로 개발 할 수 있어서 안정적임

따라서 
1. 서브(cookie) 브랜치에서 수정해서 올리는 거 따로 올라감

2. 메인 브랜치로 돌아와서 git add . > git commit -m "메인으로 돌아와서 올리는 것도 따로 올라감"
- push는 아님 only commit

3. 서브(cookie) 브랜치에서 수정한 것이 잘 올라가면 메인 브랜치에다가 합칠 수가 있다.
- 일단 master 브랜치로 넘어가고

4. 명령어는 git merge cookie(합칠 서브 브랜치)
- 문제가 발생하는 부분은 다른 스타트 포인트에서 같은 부분을 수정했을 떄 충돌이 발생한다.
- 충돌이 발생했을 때 충돌 지점을 에디터를 통해서 지우고, 수동으로 해결해야된다.

5. git add . git commit -m "이상" 내용을 작성해준다.

git log --graph --oneline --all(를 사용해서 로그확인)


3way-merge
각 브랜치에 신규 commit이 있는 경우

메인 브랜치에서 파생 된 a와, 신규 브랜치 b를 switch a를 해서 뒤로 돌아가서 합쳐주는 것이 아닌 새로 커밋을 생성해서 합칠 수가 있다.


fast-forward-merge
master branch에서 신규 커밋이 없고 파생 된 브랜치만 있을 때, 자동으로 발동되어 master branch로 사용된다.



merge 완료 된 브랜치 삭제는
필요없는 브랜치 삭제 git branch -d 

merge 안한 브랜치 삭제는
필요없는 브랜치 삭제 git branch -D


rebase merge(처음 master 브랜치에서 이어나가는 것)


깔끔해 보여서 추구
신규에서 branch없이 코드를 짜는 느낌이 듦

하지만 단점은 conflict가 많이 난다.

-rebase를 하고 싶으면 새로운 branch로 이동을해서 
git rebase "중심브랜치" 를 입력한다.
이후
git merge "새로운 브랜치명"


squash and merge (잔챙이 코드 합치는 기능) 우수

1. git branch를 통해서 가지를 뻗고 
2. switch 로 master 브랜치로 돌아와서 
3. git merge --squash "새 브런치"를 하면 사이드 브랜치에서 출력했던 부분들이 출력이 되지않는다.

대부분 3way, squash, fastfoward를 많이 사용한다.